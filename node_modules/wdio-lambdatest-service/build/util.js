"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getParentSuiteName = getParentSuiteName;
exports.updateSessionById = updateSessionById;
require("source-map-support/register");
const axios = require('axios');
const {
  version,
  appVersion,
  baseUrl,
  baseUrlApp
} = require("./constants.js");
function getParentSuiteName(fullTitle, testSuiteTitle) {
  const fullTitleWords = fullTitle.split(' ');
  const testSuiteTitleWords = testSuiteTitle.split(' ');
  const shortestLength = Math.min(fullTitleWords.length, testSuiteTitleWords.length);
  let c = 0;
  let parentSuiteName = '';
  while (c < shortestLength && fullTitleWords[c] === testSuiteTitleWords[c]) {
    parentSuiteName += fullTitleWords[c++] + ' ';
  }
  return parentSuiteName.trim();
}
async function updateSessionById(sessionId, data, lambdaCredentials) {
  const sessionUrl = lambdaCredentials.isApp ? `${baseUrlApp}${appVersion.latestVersion}/sessions/${sessionId}` : `${baseUrl}${version.latestVersion}/sessions/${sessionId}`;
  let config = {
    method: 'patch',
    maxBodyLength: Infinity,
    url: sessionUrl,
    headers: {
      'accept': 'application/json',
      'Authorization': `Basic ${Buffer.from(lambdaCredentials.username + ':' + lambdaCredentials.accessKey).toString('base64')}`,
      'Content-Type': 'application/json'
    },
    data: data
  };
  try {
    let response = await axios.request(config);
    if (process.env.LT_CLIENT_LOG === "true") {
      console.log(response);
    }
  } catch (error) {
    console.error(error);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheGlvcyIsInJlcXVpcmUiLCJ2ZXJzaW9uIiwiYXBwVmVyc2lvbiIsImJhc2VVcmwiLCJiYXNlVXJsQXBwIiwiZ2V0UGFyZW50U3VpdGVOYW1lIiwiZnVsbFRpdGxlIiwidGVzdFN1aXRlVGl0bGUiLCJmdWxsVGl0bGVXb3JkcyIsInNwbGl0IiwidGVzdFN1aXRlVGl0bGVXb3JkcyIsInNob3J0ZXN0TGVuZ3RoIiwiTWF0aCIsIm1pbiIsImxlbmd0aCIsImMiLCJwYXJlbnRTdWl0ZU5hbWUiLCJ0cmltIiwidXBkYXRlU2Vzc2lvbkJ5SWQiLCJzZXNzaW9uSWQiLCJkYXRhIiwibGFtYmRhQ3JlZGVudGlhbHMiLCJzZXNzaW9uVXJsIiwiaXNBcHAiLCJsYXRlc3RWZXJzaW9uIiwiY29uZmlnIiwibWV0aG9kIiwibWF4Qm9keUxlbmd0aCIsIkluZmluaXR5IiwidXJsIiwiaGVhZGVycyIsIkJ1ZmZlciIsImZyb20iLCJ1c2VybmFtZSIsImFjY2Vzc0tleSIsInRvU3RyaW5nIiwicmVzcG9uc2UiLCJyZXF1ZXN0IiwicHJvY2VzcyIsImVudiIsIkxUX0NMSUVOVF9MT0ciLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiXSwic291cmNlcyI6WyIuLi9zcmMvdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7IHZlcnNpb24sIGFwcFZlcnNpb24sIGJhc2VVcmwsIGJhc2VVcmxBcHAgfSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50cy5qc1wiKTtcblxuLyoqXG4gKiBbSmFzbWluZSBvbmx5XSBHZXQgdGhlIHBhcmVudCBzdWl0ZSBuYW1lIG9mIGEgdGVzdFxuICogQHBhcmFtIHtzdHJpbmd9IGZ1bGxUaXRsZSBcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXN0U3VpdGVUaXRsZSBcbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyZW50U3VpdGVOYW1lKGZ1bGxUaXRsZSwgdGVzdFN1aXRlVGl0bGUpIHtcbiAgICBjb25zdCBmdWxsVGl0bGVXb3JkcyA9IGZ1bGxUaXRsZS5zcGxpdCgnICcpO1xuICAgIGNvbnN0IHRlc3RTdWl0ZVRpdGxlV29yZHMgPSB0ZXN0U3VpdGVUaXRsZS5zcGxpdCgnICcpO1xuICAgIGNvbnN0IHNob3J0ZXN0TGVuZ3RoID0gTWF0aC5taW4oZnVsbFRpdGxlV29yZHMubGVuZ3RoLCB0ZXN0U3VpdGVUaXRsZVdvcmRzLmxlbmd0aCk7XG4gICAgbGV0IGMgPSAwO1xuICAgIGxldCBwYXJlbnRTdWl0ZU5hbWUgPSAnJztcbiAgICB3aGlsZSAoYyA8IHNob3J0ZXN0TGVuZ3RoICYmIGZ1bGxUaXRsZVdvcmRzW2NdID09PSB0ZXN0U3VpdGVUaXRsZVdvcmRzW2NdKSB7XG4gICAgICAgIHBhcmVudFN1aXRlTmFtZSArPSBmdWxsVGl0bGVXb3Jkc1tjKytdICsgJyAnO1xuICAgIH1cbiAgICByZXR1cm4gcGFyZW50U3VpdGVOYW1lLnRyaW0oKTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBzZXNzaW9uIHVzaW5nIHNlc3Npb25JZFxuICogQHBhcmFtIHtzdHJpbmd9IHNlc3Npb25JZCBcbiAqIEBwYXJhbSB7YW55fSBkYXRhXG4gKiBAcGFyYW0ge2FueX0gbGFtYmRhQ3JlZGVudGlhbHNcbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlU2Vzc2lvbkJ5SWQoc2Vzc2lvbklkLCBkYXRhLCBsYW1iZGFDcmVkZW50aWFscyl7XG4gICAgY29uc3Qgc2Vzc2lvblVybCA9IGxhbWJkYUNyZWRlbnRpYWxzLmlzQXBwID8gYCR7YmFzZVVybEFwcH0ke2FwcFZlcnNpb24ubGF0ZXN0VmVyc2lvbn0vc2Vzc2lvbnMvJHtzZXNzaW9uSWR9YCA6IGAke2Jhc2VVcmx9JHt2ZXJzaW9uLmxhdGVzdFZlcnNpb259L3Nlc3Npb25zLyR7c2Vzc2lvbklkfWA7XG4gICAgbGV0IGNvbmZpZyA9IHtcbiAgICAgICAgbWV0aG9kOiAncGF0Y2gnLFxuICAgICAgICBtYXhCb2R5TGVuZ3RoOiBJbmZpbml0eSxcbiAgICAgICAgdXJsOiBzZXNzaW9uVXJsLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnYWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmFzaWMgJHtCdWZmZXIuZnJvbShsYW1iZGFDcmVkZW50aWFscy51c2VybmFtZSArICc6JyArIGxhbWJkYUNyZWRlbnRpYWxzLmFjY2Vzc0tleSkudG9TdHJpbmcoJ2Jhc2U2NCcpfWAsXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IGRhdGFcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnJlcXVlc3QoY29uZmlnKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52LkxUX0NMSUVOVF9MT0cgPT09IFwidHJ1ZVwiKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9XG4gICAgfVxuXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsT0FBTztFQUFFQyxVQUFVO0VBQUVDLE9BQU87RUFBRUM7QUFBVyxDQUFDLEdBQUdKLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztBQVF2RSxTQUFTSyxrQkFBa0JBLENBQUNDLFNBQVMsRUFBRUMsY0FBYyxFQUFFO0VBQzFELE1BQU1DLGNBQWMsR0FBR0YsU0FBUyxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDO0VBQzNDLE1BQU1DLG1CQUFtQixHQUFHSCxjQUFjLENBQUNFLEtBQUssQ0FBQyxHQUFHLENBQUM7RUFDckQsTUFBTUUsY0FBYyxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0wsY0FBYyxDQUFDTSxNQUFNLEVBQUVKLG1CQUFtQixDQUFDSSxNQUFNLENBQUM7RUFDbEYsSUFBSUMsQ0FBQyxHQUFHLENBQUM7RUFDVCxJQUFJQyxlQUFlLEdBQUcsRUFBRTtFQUN4QixPQUFPRCxDQUFDLEdBQUdKLGNBQWMsSUFBSUgsY0FBYyxDQUFDTyxDQUFDLENBQUMsS0FBS0wsbUJBQW1CLENBQUNLLENBQUMsQ0FBQyxFQUFFO0lBQ3ZFQyxlQUFlLElBQUlSLGNBQWMsQ0FBQ08sQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHO0VBQ2hEO0VBQ0EsT0FBT0MsZUFBZSxDQUFDQyxJQUFJLENBQUMsQ0FBQztBQUNqQztBQVNPLGVBQWVDLGlCQUFpQkEsQ0FBQ0MsU0FBUyxFQUFFQyxJQUFJLEVBQUVDLGlCQUFpQixFQUFDO0VBQ3ZFLE1BQU1DLFVBQVUsR0FBR0QsaUJBQWlCLENBQUNFLEtBQUssR0FBSSxHQUFFbkIsVUFBVyxHQUFFRixVQUFVLENBQUNzQixhQUFjLGFBQVlMLFNBQVUsRUFBQyxHQUFJLEdBQUVoQixPQUFRLEdBQUVGLE9BQU8sQ0FBQ3VCLGFBQWMsYUFBWUwsU0FBVSxFQUFDO0VBQzFLLElBQUlNLE1BQU0sR0FBRztJQUNUQyxNQUFNLEVBQUUsT0FBTztJQUNmQyxhQUFhLEVBQUVDLFFBQVE7SUFDdkJDLEdBQUcsRUFBRVAsVUFBVTtJQUNmUSxPQUFPLEVBQUU7TUFDTCxRQUFRLEVBQUUsa0JBQWtCO01BQzVCLGVBQWUsRUFBRyxTQUFRQyxNQUFNLENBQUNDLElBQUksQ0FBQ1gsaUJBQWlCLENBQUNZLFFBQVEsR0FBRyxHQUFHLEdBQUdaLGlCQUFpQixDQUFDYSxTQUFTLENBQUMsQ0FBQ0MsUUFBUSxDQUFDLFFBQVEsQ0FBRSxFQUFDO01BQzFILGNBQWMsRUFBRTtJQUNwQixDQUFDO0lBQ0RmLElBQUksRUFBRUE7RUFDVixDQUFDO0VBQ0QsSUFBSTtJQUNBLElBQUlnQixRQUFRLEdBQUcsTUFBTXJDLEtBQUssQ0FBQ3NDLE9BQU8sQ0FBQ1osTUFBTSxDQUFDO0lBQzFDLElBQUlhLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxhQUFhLEtBQUssTUFBTSxFQUFDO01BQ3JDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ04sUUFBUSxDQUFDO0lBQ3pCO0VBQ0YsQ0FBQyxDQUFDLE9BQU9PLEtBQUssRUFBRTtJQUNkRixPQUFPLENBQUNFLEtBQUssQ0FBQ0EsS0FBSyxDQUFDO0VBQ3RCO0FBQ0YifQ==