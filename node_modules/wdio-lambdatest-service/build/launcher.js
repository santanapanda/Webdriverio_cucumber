"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _formData = _interopRequireDefault(require("form-data"));
var _fs = _interopRequireDefault(require("fs"));
var _axios = _interopRequireDefault(require("axios"));
var _perf_hooks = require("perf_hooks");
var _logger = _interopRequireDefault(require("@wdio/logger"));
var _nodeTunnel = _interopRequireDefault(require("@lambdatest/node-tunnel"));
var _constants = require("./constants.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const log = (0, _logger.default)('@wdio/lambdatest-service');
const colors = require('colors');
class LambdaTestLauncher {
  constructor(options) {
    _defineProperty(this, "lambdatestTunnelProcess", void 0);
    _defineProperty(this, "options", void 0);
    this.options = options;
  }
  async onPrepare(config, capabilities) {
    if (this.options.app_upload) {
      try {
        var _this$options$app, _this$options$app$app, _this$options$app2, _this$options$app$app2, _this$options$app3, _this$options$app$cus, _this$options$app4;
        const appName = (_this$options$app = this.options.app) === null || _this$options$app === void 0 ? void 0 : _this$options$app.app_name;
        if (!appName) throw new Error(colors.yellow('App name is missing.\n'));
        const appPath = (_this$options$app$app = (_this$options$app2 = this.options.app) === null || _this$options$app2 === void 0 ? void 0 : _this$options$app2.app_path) !== null && _this$options$app$app !== void 0 ? _this$options$app$app : null;
        const appUrl = (_this$options$app$app2 = (_this$options$app3 = this.options.app) === null || _this$options$app3 === void 0 ? void 0 : _this$options$app3.app_url) !== null && _this$options$app$app2 !== void 0 ? _this$options$app$app2 : null;
        const customId = (_this$options$app$cus = (_this$options$app4 = this.options.app) === null || _this$options$app4 === void 0 ? void 0 : _this$options$app4.custom_id) !== null && _this$options$app$cus !== void 0 ? _this$options$app$cus : null;
        let data = new _formData.default();
        data.append('name', appName);
        data.append(appPath !== null ? 'appFile' : 'url', appPath !== null ? _fs.default.createReadStream(appPath) : appUrl);
        data.append('custom_id', customId);
        let headerEnv = `Basic ${Buffer.from(config.user + ':' + config.key).toString('base64')}`;
        let body = {
          method: 'post',
          maxBodyLength: Infinity,
          url: 'https://manual-api.lambdatest.com/app/upload/realDevice',
          headers: {
            'Authorization': headerEnv,
            ...data.getHeaders()
          },
          data: data
        };
        const response = await _axios.default.request(body);
        console.log(colors.green(JSON.stringify(response.data)));
        const envAppUrl = response.data.app_url;
        if (this.options.app.enableCapability) {
          for (let i = 0; i < capabilities.length; i++) {
            capabilities[i].app = envAppUrl;
          }
        }
        const appId = response.data.app_id;
        if (appPath && appPath.includes('.apk') || appUrl && appUrl.includes('.apk')) {
          await checkPatchUrl(appId, headerEnv);
        }
      } catch (error) {
        console.error(error.message);
      }
    }
    if (!this.options.tunnel) {
      return;
    }
    const tunnelArguments = {
      user: config.user,
      key: config.key,
      ...this.options.lambdatestOpts
    };
    this.lambdatestTunnelProcess = new _nodeTunnel.default();
    if (Array.isArray(capabilities)) {
      capabilities.forEach(capability => {
        if (capability['lt:options']) {
          capability['LT:Options'] = {
            ...capability['lt:options']
          };
          delete capability['lt:options'];
        }
        if (capability['LT:Options'] === undefined) capability.tunnel = true;else capability['LT:Options'].tunnel = true;
      });
    } else if (typeof capabilities === 'object') {
      if (capabilities['lt:options']) {
        capabilities['LT:Options'] = {
          ...capabilities['lt:options']
        };
        delete capabilities['lt:options'];
      }
      if (capabilities['LT:Options'] === undefined) capabilities.tunnel = true;else capabilities['LT:Options'].tunnel = true;
    }
    const obs = new _perf_hooks.PerformanceObserver(list => {
      const entry = list.getEntries()[0];
      log.info(`LambdaTest Tunnel successfully started after ${entry.duration}ms`);
    });
    obs.observe({
      entryTypes: ['measure'],
      buffered: false
    });
    let timer;
    _perf_hooks.performance.mark('ltTunnelStart');
    return Promise.race([(new Promise((resolve, reject) => {
      this.lambdatestTunnelProcess.start(tunnelArguments, err => {
        if (err) {
          obs.disconnect();
          return reject(err);
        }
        this.lambdatestTunnelProcess.getTunnelName(tunnelName => {
          if (Array.isArray(capabilities)) {
            capabilities.forEach(capability => {
              if (capability['LT:Options'] === undefined) capability.tunnelName = tunnelName;else capability['LT:Options'].tunnelName = tunnelName;
            });
          } else if (typeof capabilities === 'object') {
            if (capabilities['LT:Options'] === undefined) capabilities.tunnelName = tunnelName;else capabilities['LT:Options'].tunnelName = tunnelName;
          }
          obs.disconnect();
          resolve();
        });
      });
    })), new Promise((resolve, reject) => {
      timer = setTimeout(() => {
        obs.disconnect();
        reject(new Error(_constants.TUNNEL_START_FAILED));
      }, _constants.TUNNEL_STOP_TIMEOUT);
    })]).then(result => {
      clearTimeout(timer);
      _perf_hooks.performance.mark('ltTunnelEnd');
      _perf_hooks.performance.measure('bootTime', 'ltTunnelStart', 'ltTunnelEnd');
      obs.disconnect();
      return Promise.resolve(result);
    }, err => {
      clearTimeout(timer);
      obs.disconnect();
      return Promise.reject(err);
    });
  }
  onComplete() {
    if (!this.lambdatestTunnelProcess || typeof this.lambdatestTunnelProcess.isRunning !== 'function' || !this.lambdatestTunnelProcess.isRunning()) {
      return;
    }
    let timer;
    return Promise.race([new Promise((resolve, reject) => {
      this.lambdatestTunnelProcess.stop(err => {
        if (err) return reject(err);
        resolve();
      });
    }), new Promise((resolve, reject) => {
      timer = setTimeout(() => reject(new Error(_constants.TUNNEL_STOP_FAILED)), _constants.TUNNEL_STOP_TIMEOUT);
    })]).then(() => {
      clearTimeout(timer);
      return Promise.resolve();
    }, err => {
      clearTimeout(timer);
      return Promise.reject(err);
    });
  }
}
exports.default = LambdaTestLauncher;
async function checkPatchUrl(appId, headerEnv) {
  let config = {
    method: 'get',
    maxBodyLength: Infinity,
    url: `https://manual-api.lambdatest.com/app/${appId}/url?reinstall=true`,
    headers: {
      'Authorization': headerEnv
    }
  };
  let isLoaded = false;
  while (!isLoaded) {
    try {
      const response = await _axios.default.request(config);
      const patchedUrl = response.data.patched_url;
      if (patchedUrl !== null) {
        isLoaded = true;
        break;
      }
      console.log('Waiting for app to be loaded...');
    } catch (error) {
      console.error('Error occurred:', error.message);
    }
    await new Promise(resolve => setTimeout(resolve, 15000));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZm9ybURhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9mcyIsIl9heGlvcyIsIl9wZXJmX2hvb2tzIiwiX2xvZ2dlciIsIl9ub2RlVHVubmVsIiwiX2NvbnN0YW50cyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsImxvZyIsImxvZ2dlciIsImNvbG9ycyIsIkxhbWJkYVRlc3RMYXVuY2hlciIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm9uUHJlcGFyZSIsImNvbmZpZyIsImNhcGFiaWxpdGllcyIsImFwcF91cGxvYWQiLCJfdGhpcyRvcHRpb25zJGFwcCIsIl90aGlzJG9wdGlvbnMkYXBwJGFwcCIsIl90aGlzJG9wdGlvbnMkYXBwMiIsIl90aGlzJG9wdGlvbnMkYXBwJGFwcDIiLCJfdGhpcyRvcHRpb25zJGFwcDMiLCJfdGhpcyRvcHRpb25zJGFwcCRjdXMiLCJfdGhpcyRvcHRpb25zJGFwcDQiLCJhcHBOYW1lIiwiYXBwIiwiYXBwX25hbWUiLCJFcnJvciIsInllbGxvdyIsImFwcFBhdGgiLCJhcHBfcGF0aCIsImFwcFVybCIsImFwcF91cmwiLCJjdXN0b21JZCIsImN1c3RvbV9pZCIsImRhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsImZzIiwiY3JlYXRlUmVhZFN0cmVhbSIsImhlYWRlckVudiIsIkJ1ZmZlciIsImZyb20iLCJ1c2VyIiwidG9TdHJpbmciLCJib2R5IiwibWV0aG9kIiwibWF4Qm9keUxlbmd0aCIsIkluZmluaXR5IiwidXJsIiwiaGVhZGVycyIsImdldEhlYWRlcnMiLCJyZXNwb25zZSIsImF4aW9zIiwicmVxdWVzdCIsImNvbnNvbGUiLCJncmVlbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJlbnZBcHBVcmwiLCJlbmFibGVDYXBhYmlsaXR5IiwiaSIsImxlbmd0aCIsImFwcElkIiwiYXBwX2lkIiwiaW5jbHVkZXMiLCJjaGVja1BhdGNoVXJsIiwiZXJyb3IiLCJtZXNzYWdlIiwidHVubmVsIiwidHVubmVsQXJndW1lbnRzIiwibGFtYmRhdGVzdE9wdHMiLCJsYW1iZGF0ZXN0VHVubmVsUHJvY2VzcyIsIkxhbWJkYVRlc3RUdW5uZWxMYXVuY2hlciIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJjYXBhYmlsaXR5Iiwib2JzIiwiUGVyZm9ybWFuY2VPYnNlcnZlciIsImxpc3QiLCJlbnRyeSIsImdldEVudHJpZXMiLCJpbmZvIiwiZHVyYXRpb24iLCJvYnNlcnZlIiwiZW50cnlUeXBlcyIsImJ1ZmZlcmVkIiwidGltZXIiLCJwZXJmb3JtYW5jZSIsIm1hcmsiLCJQcm9taXNlIiwicmFjZSIsInJlc29sdmUiLCJyZWplY3QiLCJzdGFydCIsImVyciIsImRpc2Nvbm5lY3QiLCJnZXRUdW5uZWxOYW1lIiwidHVubmVsTmFtZSIsInNldFRpbWVvdXQiLCJUVU5ORUxfU1RBUlRfRkFJTEVEIiwiVFVOTkVMX1NUT1BfVElNRU9VVCIsInRoZW4iLCJyZXN1bHQiLCJjbGVhclRpbWVvdXQiLCJtZWFzdXJlIiwib25Db21wbGV0ZSIsImlzUnVubmluZyIsInN0b3AiLCJUVU5ORUxfU1RPUF9GQUlMRUQiLCJleHBvcnRzIiwiaXNMb2FkZWQiLCJwYXRjaGVkVXJsIiwicGF0Y2hlZF91cmwiXSwic291cmNlcyI6WyIuLi9zcmMvbGF1bmNoZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEZvcm1EYXRhIGZyb20gJ2Zvcm0tZGF0YSc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuaW1wb3J0IHsgcGVyZm9ybWFuY2UsIFBlcmZvcm1hbmNlT2JzZXJ2ZXIgfSBmcm9tICdwZXJmX2hvb2tzJ1xuaW1wb3J0IGxvZ2dlciBmcm9tICdAd2Rpby9sb2dnZXInXG5pbXBvcnQgTGFtYmRhVGVzdFR1bm5lbExhdW5jaGVyIGZyb20gJ0BsYW1iZGF0ZXN0L25vZGUtdHVubmVsJ1xuaW1wb3J0IHsgVFVOTkVMX1NUQVJUX0ZBSUxFRCwgVFVOTkVMX1NUT1BfRkFJTEVELCBUVU5ORUxfU1RPUF9USU1FT1VUIH0gZnJvbSAnLi9jb25zdGFudHMuanMnXG5jb25zdCBsb2cgPSBsb2dnZXIoJ0B3ZGlvL2xhbWJkYXRlc3Qtc2VydmljZScpXG5jb25zdCBjb2xvcnMgPSByZXF1aXJlKCdjb2xvcnMnKTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhbWJkYVRlc3RMYXVuY2hlciB7XG4gICAgbGFtYmRhdGVzdFR1bm5lbFByb2Nlc3NcbiAgICBvcHRpb25zXG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgICB9XG5cbiAgICAvLyBtb2RpZnkgY29uZmlnIGFuZCBsYXVuY2ggdHVubmVsXG4gICAgYXN5bmMgb25QcmVwYXJlKGNvbmZpZywgY2FwYWJpbGl0aWVzKSB7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hcHBfdXBsb2FkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25zdCBhcHBOYW1lID0gdGhpcy5vcHRpb25zLmFwcD8uYXBwX25hbWU7XG4gICAgICAgICAgICAgIGlmICghYXBwTmFtZSkgdGhyb3cgbmV3IEVycm9yKGNvbG9ycy55ZWxsb3coJ0FwcCBuYW1lIGlzIG1pc3NpbmcuXFxuJykpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgY29uc3QgYXBwUGF0aCA9IHRoaXMub3B0aW9ucy5hcHA/LmFwcF9wYXRoID8/IG51bGw7XG4gICAgICAgICAgICAgIGNvbnN0IGFwcFVybCA9IHRoaXMub3B0aW9ucy5hcHA/LmFwcF91cmwgPz8gbnVsbDtcbiAgICAgICAgICAgICAgY29uc3QgY3VzdG9tSWQgPSB0aGlzLm9wdGlvbnMuYXBwPy5jdXN0b21faWQgPz8gbnVsbDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICBsZXQgZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICAgICAgICBkYXRhLmFwcGVuZCgnbmFtZScsIGFwcE5hbWUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGRhdGEuYXBwZW5kKGFwcFBhdGggIT09IG51bGwgPyAnYXBwRmlsZScgOiAndXJsJywgYXBwUGF0aCAhPT0gbnVsbCA/IGZzLmNyZWF0ZVJlYWRTdHJlYW0oYXBwUGF0aCkgOiBhcHBVcmwpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGRhdGEuYXBwZW5kKCdjdXN0b21faWQnLCBjdXN0b21JZCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgbGV0IGhlYWRlckVudiA9IGBCYXNpYyAke0J1ZmZlci5mcm9tKGNvbmZpZy51c2VyICsgJzonICsgY29uZmlnLmtleSkudG9TdHJpbmcoJ2Jhc2U2NCcpfWA7XG4gICAgICAgICAgICAgIGxldCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICAgICAgICAgIG1heEJvZHlMZW5ndGg6IEluZmluaXR5LFxuICAgICAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vbWFudWFsLWFwaS5sYW1iZGF0ZXN0LmNvbS9hcHAvdXBsb2FkL3JlYWxEZXZpY2UnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogaGVhZGVyRW52LFxuICAgICAgICAgICAgICAgICAgLi4uZGF0YS5nZXRIZWFkZXJzKClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnJlcXVlc3QoYm9keSk7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNvbG9ycy5ncmVlbihKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGNvbnN0IGVudkFwcFVybCA9IHJlc3BvbnNlLmRhdGEuYXBwX3VybDtcbiAgICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLmFwcC5lbmFibGVDYXBhYmlsaXR5KVxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYXBhYmlsaXRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY2FwYWJpbGl0aWVzW2ldLmFwcCA9IGVudkFwcFVybDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhcHBJZCA9IHJlc3BvbnNlLmRhdGEuYXBwX2lkO1xuICAgICAgICAgICAgaWYoKGFwcFBhdGggJiYgYXBwUGF0aC5pbmNsdWRlcygnLmFwaycpKSB8fCAoYXBwVXJsICYmIGFwcFVybC5pbmNsdWRlcygnLmFwaycpKSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBjaGVja1BhdGNoVXJsKGFwcElkLCBoZWFkZXJFbnYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudHVubmVsKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHR1bm5lbEFyZ3VtZW50cyA9IHtcbiAgICAgICAgICAgIHVzZXI6IGNvbmZpZy51c2VyLFxuICAgICAgICAgICAga2V5OiBjb25maWcua2V5LFxuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLmxhbWJkYXRlc3RPcHRzXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxhbWJkYXRlc3RUdW5uZWxQcm9jZXNzID0gbmV3IExhbWJkYVRlc3RUdW5uZWxMYXVuY2hlcigpXG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2FwYWJpbGl0aWVzKSkge1xuICAgICAgICAgICAgY2FwYWJpbGl0aWVzLmZvckVhY2goY2FwYWJpbGl0eSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNhcGFiaWxpdHlbJ2x0Om9wdGlvbnMnXSkge1xuICAgICAgICAgICAgICAgICAgICBjYXBhYmlsaXR5WydMVDpPcHRpb25zJ10gPSB7IC4uLmNhcGFiaWxpdHlbJ2x0Om9wdGlvbnMnXSB9O1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY2FwYWJpbGl0eVsnbHQ6b3B0aW9ucyddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihjYXBhYmlsaXR5WydMVDpPcHRpb25zJ109PT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIGNhcGFiaWxpdHkudHVubmVsID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY2FwYWJpbGl0eVsnTFQ6T3B0aW9ucyddLnR1bm5lbCA9IHRydWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhcGFiaWxpdGllcyA9PT0gJ29iamVjdCcpIHtcblxuICAgICAgICAgICAgaWYgKGNhcGFiaWxpdGllc1snbHQ6b3B0aW9ucyddKSB7XG4gICAgICAgICAgICAgICAgY2FwYWJpbGl0aWVzWydMVDpPcHRpb25zJ10gPSB7IC4uLmNhcGFiaWxpdGllc1snbHQ6b3B0aW9ucyddIH07XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNhcGFiaWxpdGllc1snbHQ6b3B0aW9ucyddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoY2FwYWJpbGl0aWVzWydMVDpPcHRpb25zJ109PT11bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgY2FwYWJpbGl0aWVzLnR1bm5lbCA9IHRydWVcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjYXBhYmlsaXRpZXNbJ0xUOk9wdGlvbnMnXS50dW5uZWwgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVhc3VyZSBMVCBib290IHRpbWVcbiAgICAgICAgY29uc3Qgb2JzID0gbmV3IFBlcmZvcm1hbmNlT2JzZXJ2ZXIobGlzdCA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IGxpc3QuZ2V0RW50cmllcygpWzBdXG4gICAgICAgICAgICBsb2cuaW5mbyhcbiAgICAgICAgICAgICAgICBgTGFtYmRhVGVzdCBUdW5uZWwgc3VjY2Vzc2Z1bGx5IHN0YXJ0ZWQgYWZ0ZXIgJHtlbnRyeS5kdXJhdGlvbn1tc2BcbiAgICAgICAgICAgIClcbiAgICAgICAgfSlcbiAgICAgICAgb2JzLm9ic2VydmUoeyBlbnRyeVR5cGVzOiBbJ21lYXN1cmUnXSwgYnVmZmVyZWQ6IGZhbHNlIH0pXG5cbiAgICAgICAgbGV0IHRpbWVyXG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ2x0VHVubmVsU3RhcnQnKVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7UHJvbWlzZTx2b2lkPn0gKi8obmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubGFtYmRhdGVzdFR1bm5lbFByb2Nlc3Muc3RhcnQodHVubmVsQXJndW1lbnRzLCBlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnMuZGlzY29ubmVjdCgpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhbWJkYXRlc3RUdW5uZWxQcm9jZXNzLmdldFR1bm5lbE5hbWUodHVubmVsTmFtZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjYXBhYmlsaXRpZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwYWJpbGl0aWVzLmZvckVhY2goY2FwYWJpbGl0eSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNhcGFiaWxpdHlbJ0xUOk9wdGlvbnMnXT09PXVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcGFiaWxpdHkudHVubmVsTmFtZSA9IHR1bm5lbE5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwYWJpbGl0eVsnTFQ6T3B0aW9ucyddLnR1bm5lbE5hbWUgPSB0dW5uZWxOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhcGFiaWxpdGllcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjYXBhYmlsaXRpZXNbJ0xUOk9wdGlvbnMnXT09PXVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwYWJpbGl0aWVzLnR1bm5lbE5hbWUgPSB0dW5uZWxOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXBhYmlsaXRpZXNbJ0xUOk9wdGlvbnMnXS50dW5uZWxOYW1lID0gdHVubmVsTmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzLmRpc2Nvbm5lY3QoKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9icy5kaXNjb25uZWN0KClcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihUVU5ORUxfU1RBUlRfRkFJTEVEKSlcbiAgICAgICAgICAgICAgICB9LCBUVU5ORUxfU1RPUF9USU1FT1VUKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgXSkudGhlbihcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgICAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKVxuICAgICAgICAgICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ2x0VHVubmVsRW5kJylcbiAgICAgICAgICAgICAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKCdib290VGltZScsICdsdFR1bm5lbFN0YXJ0JywgJ2x0VHVubmVsRW5kJylcbiAgICAgICAgICAgICAgICBvYnMuZGlzY29ubmVjdCgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcilcbiAgICAgICAgICAgICAgICBvYnMuZGlzY29ubmVjdCgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycilcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgIH1cblxuICAgIG9uQ29tcGxldGUoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICF0aGlzLmxhbWJkYXRlc3RUdW5uZWxQcm9jZXNzIHx8XG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5sYW1iZGF0ZXN0VHVubmVsUHJvY2Vzcy5pc1J1bm5pbmcgIT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICF0aGlzLmxhbWJkYXRlc3RUdW5uZWxQcm9jZXNzLmlzUnVubmluZygpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGltZXJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmFjZShbXG4gICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYW1iZGF0ZXN0VHVubmVsUHJvY2Vzcy5zdG9wKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KCBuZXcgRXJyb3IoVFVOTkVMX1NUT1BfRkFJTEVEKSksIFRVTk5FTF9TVE9QX1RJTUVPVVQpXG4gICAgICAgICAgICB9KVxuICAgICAgICBdKS50aGVuKFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcilcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcilcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKVxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgfVxuXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrUGF0Y2hVcmwoYXBwSWQsIGhlYWRlckVudikge1xuICAgIGxldCBjb25maWcgPSB7XG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIG1heEJvZHlMZW5ndGg6IEluZmluaXR5LFxuICAgICAgICB1cmw6IGBodHRwczovL21hbnVhbC1hcGkubGFtYmRhdGVzdC5jb20vYXBwLyR7YXBwSWR9L3VybD9yZWluc3RhbGw9dHJ1ZWAsXG4gICAgICAgIGhlYWRlcnM6IHsgXG4gICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBoZWFkZXJFbnZcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICBsZXQgaXNMb2FkZWQgPSBmYWxzZTtcbiAgICB3aGlsZSAoIWlzTG9hZGVkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucmVxdWVzdChjb25maWcpO1xuICAgICAgICBjb25zdCBwYXRjaGVkVXJsID0gcmVzcG9uc2UuZGF0YS5wYXRjaGVkX3VybDtcblxuICAgICAgICBpZiAocGF0Y2hlZFVybCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZygnV2FpdGluZyBmb3IgYXBwIHRvIGJlIGxvYWRlZC4uLicpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBvY2N1cnJlZDonLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdhaXQgZm9yIDE1IHNlY29uZHMgYmVmb3JlIG1ha2luZyB0aGUgbmV4dCByZXF1ZXN0XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxNTAwMCkpO1xuICAgIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxHQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxPQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxXQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTSxVQUFBLEdBQUFOLE9BQUE7QUFBNkYsU0FBQUQsdUJBQUFRLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFBQSxTQUFBRyxnQkFBQUgsR0FBQSxFQUFBSSxHQUFBLEVBQUFDLEtBQUEsSUFBQUQsR0FBQSxHQUFBRSxjQUFBLENBQUFGLEdBQUEsT0FBQUEsR0FBQSxJQUFBSixHQUFBLElBQUFPLE1BQUEsQ0FBQUMsY0FBQSxDQUFBUixHQUFBLEVBQUFJLEdBQUEsSUFBQUMsS0FBQSxFQUFBQSxLQUFBLEVBQUFJLFVBQUEsUUFBQUMsWUFBQSxRQUFBQyxRQUFBLG9CQUFBWCxHQUFBLENBQUFJLEdBQUEsSUFBQUMsS0FBQSxXQUFBTCxHQUFBO0FBQUEsU0FBQU0sZUFBQU0sR0FBQSxRQUFBUixHQUFBLEdBQUFTLFlBQUEsQ0FBQUQsR0FBQSwyQkFB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